{"ast":null,"code":"import _asyncToGenerator from \"/home/angeloacr/Proyectos/loteriaNacional/app/loteriaNacionalFront/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./carrito.service\";\nimport * as i2 from \"@angular/common/http\";\nexport let PagosService = /*#__PURE__*/(() => {\n  class PagosService {\n    //mySource = this.productionSource;\n    constructor(cart, http) {\n      this.cart = cart;\n      this.http = http;\n      this.localSource = 'http://localhost:100';\n      this.testSource = 'https://ventas-api-prueba.loteria.com.ec';\n      this.productionSource = 'https://ventas-api.loteria.com.ec'; //mySource = this.localSource;\n\n      this.mySource = this.testSource;\n    }\n\n    getAuthData() {\n      let data = JSON.parse(localStorage.getItem('userData'));\n      let lotteryToken = data.lotteryToken;\n      let user = data.playerDocument;\n      let personalId = data.personalId;\n      let accountId = data.accountId;\n      if (data.user_ == 'italtronicprep') user = data.user_;\n      let response = {\n        lotteryToken,\n        user,\n        personalId,\n        accountId\n      };\n      return response;\n    }\n\n    reservarSaldo() {}\n\n    liberarSaldo() {}\n\n    recargarSaldo() {}\n\n    hasBalance(subtotal, token) {\n      let cartTotal = parseFloat(this.cart.getTotal());\n      let testAmount = parseFloat(subtotal) + cartTotal;\n      let headers = new HttpHeaders();\n      headers = headers.append('Content-Type', 'application/json'); //let endpoint = \"/inquiry\";\n\n      let address = '/wallet';\n      let endpoint = '';\n      let body = {\n        token\n      };\n      endpoint = `${endpoint}/getBalance`;\n      address = this.mySource + address + endpoint;\n      return new Promise((resolve, reject) => {\n        this.http.post(address, body, {\n          headers: headers\n        }).subscribe(data => {\n          let balance = parseFloat(data.balance);\n          let hasBalance = balance >= testAmount;\n          resolve(hasBalance);\n        }, error => {\n          reject(new Error(error.error.message));\n        });\n      });\n    }\n\n    getCompra(ticketId, accountId) {\n      let headers = new HttpHeaders();\n      headers = headers.append('Content-Type', 'application/json');\n      let address = '/ventas';\n      let endpoint = '';\n      let body = {\n        ticketId,\n        accountId\n      };\n      endpoint = `${endpoint}/getCompra`;\n      address = this.mySource + address + endpoint;\n      return new Promise((resolve, reject) => {\n        this.http.post(address, body, {\n          headers: headers\n        }).subscribe(data => {\n          if (!data.status) {\n            reject(new Error('No se pudo encontrar la compra solicitada'));\n          }\n\n          resolve(data.values);\n        }, error => {\n          reject(new Error(error.error.message));\n        });\n      });\n    }\n\n    getCodigosPromocionales(ventaId) {\n      let headers = new HttpHeaders();\n      headers = headers.append('Content-Type', 'application/json');\n      let address = '/codigosPromocionales';\n      let endpoint = '';\n      let body = {\n        ventaId\n      };\n      endpoint = `${endpoint}/getCodes`;\n      address = this.mySource + address + endpoint;\n      return new Promise((resolve, reject) => {\n        this.http.post(address, body, {\n          headers: headers\n        }).subscribe(data => {\n          resolve(data);\n        }, error => {\n          reject(new Error(error.error.message));\n        });\n      });\n    }\n\n    getGanador(ticketId) {\n      ticketId = ticketId.toString();\n      let headers = new HttpHeaders();\n      headers = headers.append('Content-Type', 'application/json');\n      let address = '/ganadores';\n      let endpoint = '';\n      let body = {\n        ticketId\n      };\n      endpoint = `${endpoint}/getGanador`;\n      address = this.mySource + address + endpoint;\n      return new Promise((resolve, reject) => {\n        this.http.post(address, body, {\n          headers: headers\n        }).subscribe(data => {\n          resolve(data);\n        }, error => {\n          reject(new Error(error.error.message));\n        });\n      });\n    }\n\n    confirmarCompra(token, reservaId) {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        let loteria = yield _this.cart.getCarritoLoteria();\n        let lotto = yield _this.cart.getCarritoLotto();\n        let pozo = yield _this.cart.getCarritoPozo();\n        let millonaria = yield _this.cart.getCarritoMillonaria();\n\n        let total = _this.cart.getTotal();\n\n        let totalConDesc = _this.cart.getTotalConDesc();\n\n        let headers = new HttpHeaders();\n        headers = headers.append('Content-Type', 'application/json');\n        let address = '/ventas';\n        let endpoint = '';\n\n        let authData = _this.getAuthData();\n\n        let body = {\n          loteria,\n          lotto,\n          pozo,\n          millonaria,\n          lotteryToken: authData.lotteryToken,\n          user: authData.user,\n          personaId: authData.personalId,\n          accountId: authData.accountId,\n          amount: total,\n          amountConDesc: totalConDesc,\n          hasDescuento: !(total == totalConDesc),\n          token,\n          reservaId\n        };\n        endpoint = `${endpoint}/comprarBoletos`;\n        address = _this.mySource + address + endpoint;\n        return new Promise((resolve, reject) => {\n          _this.http.post(address, body, {\n            headers: headers\n          }).subscribe(data => {\n            let response = data;\n            resolve(response);\n          }, error => {\n            //reject(new Error(error.error.message));\n            reject(new Error('Ha ocurrido un error procesando la compra. Por favor, intente de nuevo.'));\n          });\n        });\n      })();\n    }\n\n    cancelarCompra() {}\n\n    finalizarCompra() {\n      this.cart.borrarCarrito();\n    }\n\n    getTotal() {\n      let total = JSON.parse(localStorage.getItem('total'));\n\n      if (total) {\n        return total;\n      } else {\n        return 0;\n      }\n    }\n\n  }\n\n  PagosService.ɵfac = function PagosService_Factory(t) {\n    return new (t || PagosService)(i0.ɵɵinject(i1.CarritoService), i0.ɵɵinject(i2.HttpClient));\n  };\n\n  PagosService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PagosService,\n    factory: PagosService.ɵfac,\n    providedIn: 'root'\n  });\n  return PagosService;\n})();","map":null,"metadata":{},"sourceType":"module"}
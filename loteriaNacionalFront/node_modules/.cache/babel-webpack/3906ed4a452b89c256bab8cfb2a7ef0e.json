{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/paginator\";\nexport let StylePaginatorDirective = /*#__PURE__*/(() => {\n  class StylePaginatorDirective {\n    constructor(matPag, vr, ren) {\n      this.matPag = matPag;\n      this.vr = vr;\n      this.ren = ren;\n      this._currentPage = 1;\n      this._pageGapTxt = \"...\";\n      this._buttons = [];\n      this._showTotalPages = 2; //Sub to rerender buttons when next page and last page is used\n\n      this.matPag.page.subscribe(v => {\n        this.switchPage(v.pageIndex);\n      });\n    }\n\n    get inc() {\n      return this._showTotalPages % 2 == 0 ? this.showTotalPages / 2 : (this.showTotalPages - 1) / 2;\n    }\n\n    get lastPageIndex() {\n      return this.matPag.getNumberOfPages() - 1;\n    }\n\n    get showTotalPages() {\n      return this._showTotalPages;\n    }\n\n    set showTotalPages(value) {\n      this._showTotalPages = value % 2 == 0 ? value + 1 : value;\n    }\n\n    buildPageNumbers() {\n      const actionContainer = this.vr.element.nativeElement.querySelector(\"div.mat-paginator-range-actions\");\n      const nextPageNode = this.vr.element.nativeElement.querySelector(\"button.mat-paginator-navigation-next\");\n      const prevButtonCount = this._buttons.length; // remove buttons before creating new ones\n\n      if (this._buttons.length > 0) {\n        this._buttons.forEach(button => {\n          this.ren.removeChild(actionContainer, button);\n        }); //Empty state array\n\n\n        this._buttons.length = 0;\n      } //initialize next page and last page buttons\n\n\n      if (this._buttons.length == 0) {\n        let nodeArray = this.vr.element.nativeElement.childNodes[0].childNodes[0].childNodes[2].childNodes;\n        /*       let node = // Numero de elementos en el paginador\n        this.vr.element.nativeElement.childNodes[0].childNodes[0].childNodes[0]\n        .childNodes[2];\n        console.log(this.vr.element.nativeElement);\n        let paginatorBox = this.vr.element.nativeElement\n        paginatorBox.class = 'paginatorBox';\n         */\n\n        /* node.style.visibility = 'hidden'; */\n        //node.style.display = 'none';\n\n        /* node.parentNode.removeChild(node); */\n\n        /* this.ren.setStyle(node, \"background-color\", \"#E3E4E5\"); */\n\n        setTimeout(() => {\n          for (let i = 0; i < nodeArray.length; i++) {\n            if (nodeArray[i].nodeName === \"BUTTON\") {\n              this.ren.setStyle(nodeArray[i], \"color\", \"white\");\n              this.ren.setStyle(nodeArray[i], \"margin\", \"2px\");\n\n              if (nodeArray[i].disabled) {\n                this.ren.setStyle(nodeArray[i], \"background-color\", \"#E3E4E5\");\n              } else {\n                this.ren.setStyle(nodeArray[i], \"background-color\", \"#293133\");\n                /* #04b865 */\n              }\n            }\n          }\n        });\n      }\n\n      let dots = false;\n\n      for (let i = 0; i < this.matPag.getNumberOfPages(); i = i + 1) {\n        if (i < this._showTotalPages && this._currentPage < this._showTotalPages && i > this._rangeStart || i >= this._rangeStart && i <= this._rangeEnd) {\n          this.ren.insertBefore(actionContainer, this.createButton(i, this.matPag.pageIndex), nextPageNode);\n        } else {\n          if (i > this._rangeEnd && !dots) {\n            this.ren.insertBefore(actionContainer, this.createButton(this._pageGapTxt, this.matPag.pageIndex), nextPageNode);\n            dots = true;\n          }\n        }\n      }\n    }\n\n    createButton(i, pageIndex) {\n      const linkBtn = this.ren.createElement(\"mat-button\");\n      this.ren.setStyle(linkBtn, \"display\", \"none\");\n      const pagingTxt = isNaN(i) ? this._pageGapTxt : +(i + 1);\n      const text = this.ren.createText(pagingTxt + \"\");\n      this.ren.addClass(linkBtn, \"mat-custom-page\");\n\n      switch (i) {\n        case pageIndex:\n          this.ren.setAttribute(linkBtn, \"disabled\", \"disabled\");\n          break;\n\n        case this._pageGapTxt:\n          this.ren.listen(linkBtn, \"click\", () => {\n            this.switchPage(this._currentPage + this._showTotalPages);\n          });\n          break;\n\n        default:\n          this.ren.listen(linkBtn, \"click\", () => {\n            this.switchPage(i);\n          });\n          break;\n      }\n\n      this.ren.appendChild(linkBtn, text); //Add button to private array for state\n\n      this._buttons.push(linkBtn);\n\n      return linkBtn;\n    }\n\n    initPageRange() {\n      this._rangeStart = this._currentPage - this._showTotalPages / 2;\n      this._rangeEnd = this._currentPage + this._showTotalPages / 2;\n      this.buildPageNumbers();\n    }\n    /*   private initPageRange(): void {\n      const middleIndex = (this._rangeStart + this._rangeEnd) / 2;\n         this._rangeStart = this.calcRangeStart(middleIndex);\n      this._rangeEnd = this.calcRangeEnd(middleIndex);\n         this.buildPageNumbers();\n    } */\n\n\n    switchPage(i) {\n      this._currentPage = i;\n      this.matPag.pageIndex = i;\n      this.initPageRange();\n    }\n\n    ngAfterViewInit() {\n      this._rangeStart = 0;\n      this._rangeEnd = this._showTotalPages - 1;\n      this.initPageRange();\n    }\n\n  }\n\n  StylePaginatorDirective.ɵfac = function StylePaginatorDirective_Factory(t) {\n    return new (t || StylePaginatorDirective)(i0.ɵɵdirectiveInject(i1.MatPaginator, 11), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.Renderer2));\n  };\n\n  StylePaginatorDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: StylePaginatorDirective,\n    selectors: [[\"\", \"style-paginator\", \"\"]],\n    inputs: {\n      showTotalPages: \"showTotalPages\"\n    }\n  });\n  return StylePaginatorDirective;\n})();","map":null,"metadata":{},"sourceType":"module"}
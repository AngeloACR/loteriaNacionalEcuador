{"ast":null,"code":"import _asyncToGenerator from \"/home/angeloacr/Proyectos/loteriaNacional/app/loteriaNacionalFront/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./carrito.service\";\nimport * as i2 from \"@angular/common/http\";\nexport class PagosService {\n  constructor(cart, http) {\n    this.cart = cart;\n    this.http = http;\n    this.mySource = environment.source;\n  }\n\n  getAuthData() {\n    let data = JSON.parse(localStorage.getItem('userData'));\n    let lotteryToken = data.lotteryToken;\n    let user = data.playerDocument;\n    let personalId = data.personaId;\n    let accountId = data.accountId;\n    if (data.user_ == 'italtronicprep') user = data.user_;\n    let response = {\n      lotteryToken,\n      user,\n      personalId,\n      accountId\n    };\n    return response;\n  }\n\n  reservarSaldo() {}\n\n  liberarSaldo() {}\n\n  recargarSaldo() {}\n\n  hasBalance(subtotal, token) {\n    let cartTotal = parseFloat(this.cart.getTotal());\n    let testAmount = parseFloat(subtotal) + cartTotal;\n    let headers = new HttpHeaders();\n    headers = headers.append('Content-Type', 'application/json'); //let endpoint = \"/inquiry\";\n\n    let address = '/wallet';\n    let endpoint = '';\n    let body = {\n      token\n    };\n    endpoint = `${endpoint}/getBalance`;\n    address = this.mySource + address + endpoint;\n    return new Promise((resolve, reject) => {\n      this.http.post(address, body, {\n        headers: headers\n      }).subscribe(data => {\n        let balance = parseFloat(data.balance);\n        let hasBalance = balance >= testAmount;\n        resolve(hasBalance);\n      }, error => {\n        reject(new Error(error.error.message));\n      });\n    });\n  }\n\n  getCompra(ticketId, personaId) {\n    let headers = new HttpHeaders();\n    headers = headers.append('Content-Type', 'application/json');\n    let address = '/ventas';\n    let endpoint = '';\n    let body = {\n      ticketId,\n      personaId\n    };\n    endpoint = `${endpoint}/getCompra`;\n    address = this.mySource + address + endpoint;\n    return new Promise((resolve, reject) => {\n      this.http.post(address, body, {\n        headers: headers\n      }).subscribe(data => {\n        if (!data.status) {\n          reject(new Error('No se pudo encontrar la compra solicitada'));\n        }\n\n        resolve(data.values);\n      }, error => {\n        reject(new Error(error.error.message));\n      });\n    });\n  }\n\n  getCodigosPromocionales(ventaId) {\n    let headers = new HttpHeaders();\n    headers = headers.append('Content-Type', 'application/json');\n    let address = '/codigosPromocionales';\n    let endpoint = '';\n    let body = {\n      ventaId\n    };\n    endpoint = `${endpoint}/getCodes`;\n    address = this.mySource + address + endpoint;\n    return new Promise((resolve, reject) => {\n      this.http.post(address, body, {\n        headers: headers\n      }).subscribe(data => {\n        resolve(data);\n      }, error => {\n        reject(new Error(error.error.message));\n      });\n    });\n  }\n\n  getGanador(ticketId) {\n    ticketId = ticketId.toString();\n    let headers = new HttpHeaders();\n    headers = headers.append('Content-Type', 'application/json');\n    let address = '/ganadores';\n    let endpoint = '';\n    let body = {\n      ticketId\n    };\n    endpoint = `${endpoint}/getGanador`;\n    address = this.mySource + address + endpoint;\n    return new Promise((resolve, reject) => {\n      this.http.post(address, body, {\n        headers: headers\n      }).subscribe(data => {\n        resolve(data);\n      }, error => {\n        reject(new Error(error.error.message));\n      });\n    });\n  }\n\n  confirmarCompra(token, reservaId) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      let loteria = yield _this.cart.getCarritoLoteria();\n      let lotto = yield _this.cart.getCarritoLotto();\n      let pozo = yield _this.cart.getCarritoPozo();\n      let millonaria = yield _this.cart.getCarritoMillonaria();\n\n      let total = _this.cart.getTotal();\n\n      let totalConDesc = _this.cart.getTotalConDesc();\n\n      let headers = new HttpHeaders();\n      headers = headers.append('Content-Type', 'application/json');\n      let address = '/ventas';\n      let endpoint = '';\n\n      let authData = _this.getAuthData();\n\n      let body = {\n        loteria,\n        lotto,\n        pozo,\n        millonaria,\n        lotteryToken: authData.lotteryToken,\n        user: authData.user,\n        personaId: authData.personalId,\n        accountId: authData.accountId,\n        amount: total,\n        amountConDesc: totalConDesc,\n        hasDescuento: !(total == totalConDesc),\n        token,\n        reservaId\n      };\n      endpoint = `${endpoint}/comprarBoletos`;\n      address = _this.mySource + address + endpoint;\n      return new Promise((resolve, reject) => {\n        _this.http.post(address, body, {\n          headers: headers\n        }).subscribe(data => {\n          let response = data;\n          resolve(response);\n        }, error => {\n          //reject(new Error(error.error.message));\n          reject(new Error('Ha ocurrido un error procesando la compra. Por favor, intente de nuevo.'));\n        });\n      });\n    })();\n  }\n\n  cancelarCompra() {}\n\n  finalizarCompra() {\n    this.cart.borrarCarrito();\n  }\n\n  getTotal() {\n    let total = JSON.parse(localStorage.getItem('total'));\n\n    if (total) {\n      return total;\n    } else {\n      return 0;\n    }\n  }\n\n}\n\nPagosService.ɵfac = function PagosService_Factory(t) {\n  return new (t || PagosService)(i0.ɵɵinject(i1.CarritoService), i0.ɵɵinject(i2.HttpClient));\n};\n\nPagosService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PagosService,\n  factory: PagosService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/home/angeloacr/Proyectos/loteriaNacional/app/loteriaNacionalFront/src/app/ventas/services/pagos.service.ts"],"names":["HttpHeaders","environment","i0","i1","i2","PagosService","constructor","cart","http","mySource","source","getAuthData","data","JSON","parse","localStorage","getItem","lotteryToken","user","playerDocument","personalId","personaId","accountId","user_","response","reservarSaldo","liberarSaldo","recargarSaldo","hasBalance","subtotal","token","cartTotal","parseFloat","getTotal","testAmount","headers","append","address","endpoint","body","Promise","resolve","reject","post","subscribe","balance","error","Error","message","getCompra","ticketId","status","values","getCodigosPromocionales","ventaId","getGanador","toString","confirmarCompra","reservaId","loteria","getCarritoLoteria","lotto","getCarritoLotto","pozo","getCarritoPozo","millonaria","getCarritoMillonaria","total","totalConDesc","getTotalConDesc","authData","amount","amountConDesc","hasDescuento","cancelarCompra","finalizarCompra","borrarCarrito","ɵfac","PagosService_Factory","t","ɵɵinject","CarritoService","HttpClient","ɵprov","ɵɵdefineInjectable","factory","providedIn"],"mappings":"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","sourcesContent":["import { HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./carrito.service\";\nimport * as i2 from \"@angular/common/http\";\nexport class PagosService {\n    constructor(cart, http) {\n        this.cart = cart;\n        this.http = http;\n        this.mySource = environment.source;\n    }\n    getAuthData() {\n        let data = JSON.parse(localStorage.getItem('userData'));\n        let lotteryToken = data.lotteryToken;\n        let user = data.playerDocument;\n        let personalId = data.personaId;\n        let accountId = data.accountId;\n        if (data.user_ == 'italtronicprep')\n            user = data.user_;\n        let response = {\n            lotteryToken,\n            user,\n            personalId,\n            accountId,\n        };\n        return response;\n    }\n    reservarSaldo() { }\n    liberarSaldo() { }\n    recargarSaldo() { }\n    hasBalance(subtotal, token) {\n        let cartTotal = parseFloat(this.cart.getTotal());\n        let testAmount = parseFloat(subtotal) + cartTotal;\n        let headers = new HttpHeaders();\n        headers = headers.append('Content-Type', 'application/json');\n        //let endpoint = \"/inquiry\";\n        let address = '/wallet';\n        let endpoint = '';\n        let body = {\n            token,\n        };\n        endpoint = `${endpoint}/getBalance`;\n        address = this.mySource + address + endpoint;\n        return new Promise((resolve, reject) => {\n            this.http.post(address, body, { headers: headers }).subscribe((data) => {\n                let balance = parseFloat(data.balance);\n                let hasBalance = balance >= testAmount;\n                resolve(hasBalance);\n            }, (error) => {\n                reject(new Error(error.error.message));\n            });\n        });\n    }\n    getCompra(ticketId, personaId) {\n        let headers = new HttpHeaders();\n        headers = headers.append('Content-Type', 'application/json');\n        let address = '/ventas';\n        let endpoint = '';\n        let body = {\n            ticketId,\n            personaId,\n        };\n        endpoint = `${endpoint}/getCompra`;\n        address = this.mySource + address + endpoint;\n        return new Promise((resolve, reject) => {\n            this.http.post(address, body, { headers: headers }).subscribe((data) => {\n                if (!data.status) {\n                    reject(new Error('No se pudo encontrar la compra solicitada'));\n                }\n                resolve(data.values);\n            }, (error) => {\n                reject(new Error(error.error.message));\n            });\n        });\n    }\n    getCodigosPromocionales(ventaId) {\n        let headers = new HttpHeaders();\n        headers = headers.append('Content-Type', 'application/json');\n        let address = '/codigosPromocionales';\n        let endpoint = '';\n        let body = {\n            ventaId,\n        };\n        endpoint = `${endpoint}/getCodes`;\n        address = this.mySource + address + endpoint;\n        return new Promise((resolve, reject) => {\n            this.http.post(address, body, { headers: headers }).subscribe((data) => {\n                resolve(data);\n            }, (error) => {\n                reject(new Error(error.error.message));\n            });\n        });\n    }\n    getGanador(ticketId) {\n        ticketId = ticketId.toString();\n        let headers = new HttpHeaders();\n        headers = headers.append('Content-Type', 'application/json');\n        let address = '/ganadores';\n        let endpoint = '';\n        let body = {\n            ticketId,\n        };\n        endpoint = `${endpoint}/getGanador`;\n        address = this.mySource + address + endpoint;\n        return new Promise((resolve, reject) => {\n            this.http.post(address, body, { headers: headers }).subscribe((data) => {\n                resolve(data);\n            }, (error) => {\n                reject(new Error(error.error.message));\n            });\n        });\n    }\n    async confirmarCompra(token, reservaId) {\n        let loteria = await this.cart.getCarritoLoteria();\n        let lotto = await this.cart.getCarritoLotto();\n        let pozo = await this.cart.getCarritoPozo();\n        let millonaria = await this.cart.getCarritoMillonaria();\n        let total = this.cart.getTotal();\n        let totalConDesc = this.cart.getTotalConDesc();\n        let headers = new HttpHeaders();\n        headers = headers.append('Content-Type', 'application/json');\n        let address = '/ventas';\n        let endpoint = '';\n        let authData = this.getAuthData();\n        let body = {\n            loteria,\n            lotto,\n            pozo,\n            millonaria,\n            lotteryToken: authData.lotteryToken,\n            user: authData.user,\n            personaId: authData.personalId,\n            accountId: authData.accountId,\n            amount: total,\n            amountConDesc: totalConDesc,\n            hasDescuento: !(total == totalConDesc),\n            token,\n            reservaId,\n        };\n        endpoint = `${endpoint}/comprarBoletos`;\n        address = this.mySource + address + endpoint;\n        return new Promise((resolve, reject) => {\n            this.http.post(address, body, { headers: headers }).subscribe((data) => {\n                let response = data;\n                resolve(response);\n            }, (error) => {\n                //reject(new Error(error.error.message));\n                reject(new Error('Ha ocurrido un error procesando la compra. Por favor, intente de nuevo.'));\n            });\n        });\n    }\n    cancelarCompra() { }\n    finalizarCompra() {\n        this.cart.borrarCarrito();\n    }\n    getTotal() {\n        let total = JSON.parse(localStorage.getItem('total'));\n        if (total) {\n            return total;\n        }\n        else {\n            return 0;\n        }\n    }\n}\nPagosService.ɵfac = function PagosService_Factory(t) { return new (t || PagosService)(i0.ɵɵinject(i1.CarritoService), i0.ɵɵinject(i2.HttpClient)); };\nPagosService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PagosService, factory: PagosService.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}